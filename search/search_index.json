{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to uainsight","text":"<p>uainsight is a powerful and flexible Python package for parsing and analyzing User-Agent strings. The name \"uainsight\" combines \"UA\" (User Agent) with \"insight,\" reflecting our goal to provide deep understanding and analysis of User-Agent data. It offers seamless integration with popular web frameworks like FastAPI, Django, and Flask.</p>"},{"location":"#what-does-uainsight-mean","title":"What does uainsight mean?","text":"<ul> <li>UA: Stands for User Agent, the core focus of our package.</li> <li>insight: Represents the deep analysis and understanding we provide for User-Agent strings.</li> </ul> <p>Together, uainsight embodies our mission to offer comprehensive, insightful analysis of User-Agent data, going beyond simple parsing to provide valuable insights for web developers and analysts.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Accurate parsing of User-Agent strings</li> <li>Extraction of browser, operating system, and device information</li> <li>Bot detection capabilities</li> <li>Easy integration with FastAPI, Django, and Flask</li> <li>Insightful analysis of User-Agent trends and patterns</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from uainsight import parse_user_agent\n\nua_string = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\nua = parse_user_agent(ua_string)\n\nprint(f\"Browser: {ua.browser.name} {ua.browser.version}\")\nprint(f\"OS: {ua.os.name} {ua.os.version}\")\nprint(f\"Device: {ua.device}\")\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide: Learn how to install uainsight</li> <li>Usage Guide: Explore the basic and advanced usage of uainsight</li> <li>API Reference: Detailed information about uainsight's classes and methods</li> <li>Framework Integrations:<ul> <li>Django Integration</li> <li>FastAPI Integration</li> <li>Flask Integration</li> </ul> </li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for more details.</p>"},{"location":"#license","title":"License","text":"<p>uainsight is released under the MIT License. See the LICENSE file for more details.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#useragentparser","title":"UserAgentParser","text":"<pre><code>class UserAgentParser:\n    def __init__(self):\n        # Initialize the parser\n\n    def parse(self, user_agent_string: str) -&gt; UserAgent:\n        \"\"\"\n        Parse a User-Agent string and return a UserAgent object.\n\n        Args:\n            user_agent_string (str): The User-Agent string to parse\n\n        Returns:\n            UserAgent: An object containing parsed User-Agent information\n        \"\"\"\n</code></pre>"},{"location":"api/#parse_user_agent","title":"parse_user_agent","text":"<pre><code>def parse_user_agent(user_agent_string: str) -&gt; UserAgent:\n    \"\"\"\n    Parse a User-Agent string and return a UserAgent object.\n\n    This is a convenience function that creates a UserAgentParser instance\n    and calls its parse method.\n\n    Args:\n        user_agent_string (str): The User-Agent string to parse\n\n    Returns:\n        UserAgent: An object containing parsed User-Agent information\n    \"\"\"\n</code></pre>"},{"location":"api/#useragent","title":"UserAgent","text":"<pre><code>@dataclass\nclass UserAgent:\n    browser: Browser\n    os: OperatingSystem\n    device: str\n    is_bot: bool\n    is_mobile: bool\n    is_tablet: bool\n    is_desktop: bool\n    is_touch_capable: bool\n    is_pc: bool\n    is_web_view: bool\n    web_view_type: str\n    is_smart_tv: bool\n    is_console: bool\n    console_type: str\n    is_ereader: bool\n    raw: str\n</code></pre>"},{"location":"api/#browser","title":"Browser","text":"<pre><code>@dataclass\nclass Browser:\n    name: str\n    version: str\n    family: str = \"\"\n</code></pre>"},{"location":"api/#operatingsystem","title":"OperatingSystem","text":"<pre><code>@dataclass\nclass OperatingSystem:\n    name: str\n    version: str\n    edition: str = \"\"\n</code></pre>"},{"location":"contributing/","title":"Contributing to uainsight","text":"<p>We welcome contributions to uainsight! This document provides guidelines for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub.</li> <li> <p>Clone your fork locally:</p> <pre><code>git clone https://github.com/joongi007/uainsight.git\ncd uainsight\n</code></pre> </li> <li> <p>Ensure you have Poetry installed. If not, install it following the instructions at Poetry Installation</p> <p>3.1. Additionally, you can install the \"poetry-bumpversion\" plug-in to help you manage the version. Follow the instructions in\"poetry-bumpversion\" Plugin Installation</p> </li> <li> <p>Install the project dependencies:</p> <pre><code>poetry install\n</code></pre> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a new branch for your feature or bug fix:</p> <pre><code>git checkout -b feature-or-fix-name\n</code></pre> </li> <li> <p>Make your changes and commit them with a clear commit message.</p> </li> <li> <p>Push your changes to your fork:</p> <pre><code>git push origin feature-or-fix-name\n</code></pre> </li> <li> <p>Open a pull request against the main repository.</p> </li> </ol>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<ul> <li>We use Black for code formatting. Please run <code>poetry run black .</code> before committing.</li> <li>We use Ruff for linting. Run <code>poetry run ruff check . --fix</code> to check your code.</li> <li>Write clear, readable code and include comments where necessary.</li> <li>Write meaningful commit messages.</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write tests for new features or bug fixes using pytest.</li> <li>Ensure all tests pass before submitting a pull request:<pre><code>poetry run pytest\n</code></pre> </li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>We use MkDocs for our documentation. Here's how you can work on, contribute to, and deploy the documentation:</p> <ol> <li> <p>Setup: Ensure you have all dependencies installed:</p> <pre><code>poetry install\n</code></pre> </li> <li> <p>Local Development: To work on the documentation locally and see your changes in real-time:</p> <pre><code>poetry run mkdocs serve\n</code></pre> <p>This will start a local server, typically at <code>http://127.0.0.1:8000/</code>. You can view your changes live as you edit the documentation.</p> </li> <li> <p>Writing Documentation: </p> <ul> <li>Documentation files are located in the <code>docs/</code> directory.</li> <li>We use Markdown for our documentation. Please refer to the MkDocs documentation for specific formatting guidelines.</li> <li>Update existing files or create new ones as needed.</li> <li>Use clear and concise language in your documentation.</li> </ul> </li> <li> <p>Building Documentation: To build the documentation:</p> <pre><code>poetry run mkdocs build\n</code></pre> <p>This will create a <code>site/</code> directory with the built HTML files.</p> </li> <li> <p>Submitting Changes: </p> <ul> <li>Commit your changes to your feature branch.</li> <li>Push the changes to your fork.</li> <li>Open a pull request with a clear description of the documentation changes.</li> </ul> </li> <li> <p>Documentation Review: </p> <ul> <li>The maintainers will review your documentation changes.</li> <li>Be prepared to make adjustments based on feedback.</li> </ul> </li> <li> <p>Deployment: </p> <ol> <li>Ensure all changes have been reviewed and merged into the main branch.</li> <li> <p>Run the following command:</p> <pre><code>poetry run mkdocs gh-deploy\n</code></pre> </li> <li> <p>This command builds the documentation and pushes it to the <code>gh-pages</code> branch, which GitHub Pages uses to serve the site.</p> </li> </ol> </li> </ol> <p>Note: The ability to deploy documentation is typically restricted to project maintainers. If you're a contributor without deployment permissions, your documentation changes will be deployed once they're merged into the main branch.</p> <p>Remember to update the documentation whenever you add new features, change existing functionality, or fix bugs that affect user interaction with the library.</p> <p>If you have any questions about working on or deploying the documentation, please open an issue and we'll be happy to help!</p>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Push your changes to your fork on GitHub.</li> <li>Submit a pull request to the main repository (https://github.com/joongi007/uainsight).</li> <li>The core team will review your pull request and may request changes or ask questions.</li> </ol>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Use the GitHub issue tracker to report bugs.</li> <li>Include as much detail as possible: steps to reproduce the issue, error messages, Python version, operating system, etc.</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>We're always looking for suggestions to improve uainsight. If you have an idea for a new feature:</p> <ol> <li>Check if the feature has already been suggested or discussed in the issues.</li> <li>If not, open a new issue describing the feature and its potential benefits.</li> </ol>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have any questions about contributing, please open an issue and we'll be happy to help!</p> <p>Thank you for contributing to uainsight!</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide will help you install uainsight in your Python environment.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<p>uainsight requires Python 3.9 or later.</p>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#using-poetry-recommended","title":"Using Poetry (Recommended)","text":"<p>If you're using Poetry for dependency management (which we recommend), you can add uainsight to your project with:</p> <pre><code>poetry add uainsight\n</code></pre>"},{"location":"installation/#using-pip","title":"Using pip","text":"<p>If you prefer using pip, you can install uainsight with:</p> <pre><code>pip install uainsight\n</code></pre>"},{"location":"installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>After installation, you can verify that uainsight is correctly installed by running Python and trying to import it:</p> <pre><code>import uainsight\nprint(uainsight.__version__)\n</code></pre> <p>This should print the version number of uainsight without any errors.</p>"},{"location":"installation/#installing-for-development","title":"Installing for Development","text":"<p>If you want to contribute to uainsight or install the latest development version, you can clone the repository and install it in editable mode:</p> <pre><code>git clone https://github.com/joongi007/uainsight.git\ncd uainsight\npoetry install\n</code></pre> <p>Or if you're using pip:</p> <pre><code>pip install -e .\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you have uainsight installed, you can start using it in your projects. Check out the Usage Guide for examples and best practices.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide provides an overview of how to use uainsight in your Python projects.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":""},{"location":"usage/#parsing-a-user-agent-string","title":"Parsing a User-Agent String","text":"<p>The most common use case is parsing a User-Agent string:</p> <pre><code>from uainsight import parse_user_agent\n\nua_string = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\nua = parse_user_agent(ua_string)\n\nprint(f\"Browser: {ua.browser.name} {ua.browser.version}\")\nprint(f\"OS: {ua.os.name} {ua.os.version}\")\nprint(f\"Device: {ua.device}\")\n</code></pre>"},{"location":"usage/#checking-for-mobile-devices","title":"Checking for Mobile Devices","text":"<p>You can easily check if a User-Agent string belongs to a mobile device:</p> <pre><code>if ua.is_mobile:\n    print(\"This is a mobile device\")\nelse:\n    print(\"This is not a mobile device\")\n</code></pre>"},{"location":"usage/#bot-detection","title":"Bot Detection","text":"<p>uainsight can help you identify if a User-Agent string belongs to a bot:</p> <pre><code>if ua.is_bot:\n    print(\"This User-Agent belongs to a bot\")\nelse:\n    print(\"This User-Agent does not belong to a bot\")\n</code></pre>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#using-the-useragentparser-class","title":"Using the UserAgentParser Class","text":"<p>For more control over the parsing process, you can use the <code>UserAgentParser</code> class directly:</p> <pre><code>from uainsight import UserAgentParser\n\nparser = UserAgentParser()\nua = parser.parse(\"Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\")\n\nprint(f\"Browser Family: {ua.browser.family}\")\nprint(f\"OS: {ua.os.name} {ua.os.version}\")\nprint(f\"Is Touch Capable: {ua.is_touch_capable}\")\n</code></pre>"},{"location":"usage/#handling-unknown-user-agents","title":"Handling Unknown User-Agents","text":"<p>When encountering an unknown User-Agent, uainsight will still provide as much information as it can:</p> <pre><code>ua = parse_user_agent(\"Unknown/1.0\")\nprint(f\"Browser: {ua.browser.name or 'Unknown'}\")\nprint(f\"OS: {ua.os.name or 'Unknown'}\")\n</code></pre> <p>For more examples, check the examples folder.</p>"},{"location":"usage/#best-practices","title":"Best Practices","text":"<ul> <li>Always handle the case where certain attributes might be None or empty strings.</li> <li>Use the <code>is_bot</code> attribute to filter out bot traffic in your analytics or rate limiting logic.</li> <li>Remember that User-Agent strings can be spoofed, so don't rely on them for security-critical decisions.</li> </ul>"},{"location":"usage/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for a complete list of attributes and methods.</li> <li>Learn how to integrate uainsight with popular web frameworks:<ul> <li>Django Integration</li> <li>FastAPI Integration</li> <li>Flask Integration</li> </ul> </li> </ul>"},{"location":"integrations/django/","title":"Django Integration","text":"<p>uainsight provides seamless integration with Django through a middleware.</p>"},{"location":"integrations/django/#installation","title":"Installation","text":"<p>First, ensure you have installed uainsight in your Django project:</p> <pre><code>poetry add uainsight\n</code></pre> <p>or if you're using pip:</p> <pre><code>pip install uainsight\n</code></pre>"},{"location":"integrations/django/#configuration","title":"Configuration","text":"<p>Add the uainsight middleware to your Django project by editing the <code>MIDDLEWARE</code> setting in your <code>settings.py</code> file:</p> <pre><code>MIDDLEWARE = [\n    # ... other middleware\n    'uainsight.integrations.django.DjangoUserAgentMiddleware',\n]\n</code></pre>"},{"location":"integrations/django/#usage","title":"Usage","text":"<p>Once the middleware is added, you can access the parsed User-Agent information in your views through the <code>request</code> object:</p> <pre><code>def my_view(request):\n    ua = request.user_agent\n    return HttpResponse(f\"You're using {ua.browser.name} {ua.browser.version} on {ua.os.name} {ua.os.version}\")\n</code></pre>"},{"location":"integrations/django/#advanced-usage","title":"Advanced Usage","text":""},{"location":"integrations/django/#custom-middleware-configuration","title":"Custom Middleware Configuration","text":"<p>If you need to customize the middleware, you can create your own subclass:</p> <pre><code>from uainsight.integrations.django import DjangoUserAgentMiddleware\n\nclass MyCustomMiddleware(DjangoUserAgentMiddleware):\n    def __init__(self, get_response=None):\n        super().__init__(get_response)\n        self.ua_header = \"HTTP_X_MY_USER_AGENT\"  # Use a custom header\n\n# Then use MyCustomMiddleware in your MIDDLEWARE setting\n</code></pre>"},{"location":"integrations/django/#accessing-user-agent-in-templates","title":"Accessing User-Agent in Templates","text":"<p>You can also access the User-Agent information in your Django templates:</p> <pre><code>&lt;p&gt;You're using {{ request.user_agent.browser.name }} on {{ request.user_agent.os.name }}&lt;/p&gt;\n</code></pre> <p>Remember to ensure that the <code>request</code> object is available in your template context.</p>"},{"location":"integrations/fastapi/","title":"FastAPI Integration","text":"<p>uainsight offers easy integration with FastAPI through a middleware.</p>"},{"location":"integrations/fastapi/#installation","title":"Installation","text":"<p>First, make sure you have installed uainsight in your FastAPI project:</p> <pre><code>poetry add uainsight\n</code></pre> <p>or if you're using pip:</p> <pre><code>pip install uainsight\n</code></pre>"},{"location":"integrations/fastapi/#configuration","title":"Configuration","text":"<p>To use uainsight with FastAPI, you need to add the middleware to your FastAPI application:</p> <pre><code>from fastapi import FastAPI\nfrom uainsight.integrations.fastapi import FastapiUserAgentMiddleware\n\napp = FastAPI()\napp.add_middleware(FastapiUserAgentMiddleware)\n</code></pre>"},{"location":"integrations/fastapi/#usage","title":"Usage","text":"<p>Once the middleware is added, you can access the parsed User-Agent information in your route handlers through the <code>request.state</code> object:</p> <pre><code>from fastapi import Request\n\n@app.get(\"/\")\nasync def root(request: Request):\n    ua = request.state.user_agent\n    return {\"message\": f\"You're using {ua.browser.name} {ua.browser.version} on {ua.os.name} {ua.os.version}\"}\n</code></pre>"},{"location":"integrations/fastapi/#advanced-usage","title":"Advanced Usage","text":""},{"location":"integrations/fastapi/#custom-middleware-configuration","title":"Custom Middleware Configuration","text":"<p>If you need to customize the middleware, you can pass parameters when adding it:</p> <pre><code>app.add_middleware(FastapiUserAgentMiddleware, ua_header=\"X-My-User-Agent\")\n</code></pre>"},{"location":"integrations/fastapi/#dependency-injection","title":"Dependency Injection","text":"<p>You can also create a dependency to easily inject the User-Agent information into your route handlers:</p> <pre><code>from fastapi import Depends\n\ndef get_user_agent(request: Request):\n    return request.state.user_agent\n\n@app.get(\"/browser\")\nasync def get_browser_info(ua: UserAgent = Depends(get_user_agent)):\n    return {\"browser\": ua.browser.name, \"version\": ua.browser.version}\n</code></pre> <p>This approach allows you to directly access the User-Agent information without going through the request object.</p>"},{"location":"integrations/flask/","title":"Flask Integration","text":"<p>uainsight provides straightforward integration with Flask through a middleware.</p>"},{"location":"integrations/flask/#installation","title":"Installation","text":"<p>First, ensure you have installed uainsight in your Flask project:</p> <pre><code>poetry add uainsight\n</code></pre> <p>or if you're using pip:</p> <pre><code>pip install uainsight\n</code></pre>"},{"location":"integrations/flask/#configuration","title":"Configuration","text":"<p>To use uainsight with Flask, you need to initialize the middleware with your Flask app:</p> <pre><code>from flask import Flask\nfrom uainsight.integrations.flask import FlaskUserAgentMiddleware\n\napp = Flask(__name__)\nFlaskUserAgentMiddleware(app)\n</code></pre>"},{"location":"integrations/flask/#usage","title":"Usage","text":"<p>Once the middleware is initialized, you can access the parsed User-Agent information in your route handlers through the <code>request</code> object:</p> <pre><code>from flask import request\n\n@app.route('/')\ndef hello():\n    ua = request.user_agent\n    return f\"You're using {ua.browser.name} {ua.browser.version} on {ua.os.name} {ua.os.version}\"\n</code></pre>"},{"location":"integrations/flask/#advanced-usage","title":"Advanced Usage","text":""},{"location":"integrations/flask/#custom-middleware-configuration","title":"Custom Middleware Configuration","text":"<p>If you need to customize the middleware, you can subclass it:</p> <pre><code>from uainsight.integrations.flask import FlaskUserAgentMiddleware\n\nclass MyCustomMiddleware(FlaskUserAgentMiddleware):\n    def __init__(self, app):\n        super().__init__(app)\n        self.ua_header = \"X-My-User-Agent\"  # Use a custom header\n\n# Then use MyCustomMiddleware instead of FlaskUserAgentMiddleware\n</code></pre>"},{"location":"integrations/flask/#using-with-flask-restful","title":"Using with Flask-RESTful","text":"<p>If you're using Flask-RESTful, you can access the User-Agent information in your resources:</p> <pre><code>from flask_restful import Resource\n\nclass MyResource(Resource):\n    def get(self):\n        ua = request.user_agent\n        return {\"browser\": ua.browser.name, \"os\": ua.os.name}\n</code></pre> <p>Remember to initialize the FlaskUserAgentMiddleware before setting up your Flask-RESTful API.</p>"}]}